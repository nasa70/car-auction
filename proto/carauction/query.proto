syntax = "proto3";
package nasa70.carauction.carauction;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "carauction/params.proto";
import "carauction/lots.proto";
import "carauction/assets.proto";
import "carauction/auction_info.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/nasa70/car-auction/x/carauction/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nasa70/car-auction/carauction/params";
  }
  // Queries a Lots by id.
	rpc Lots(QueryGetLotsRequest) returns (QueryGetLotsResponse) {
		option (google.api.http).get = "/nasa70/car-auction/carauction/lots/{id}";
	}

	// Queries a list of Lots items.
	rpc LotsAll(QueryAllLotsRequest) returns (QueryAllLotsResponse) {
		option (google.api.http).get = "/nasa70/car-auction/carauction/lots";
	}

// Queries a Assets by id.
	rpc Assets(QueryGetAssetsRequest) returns (QueryGetAssetsResponse) {
		option (google.api.http).get = "/nasa70/car-auction/carauction/assets/{id}";
	}

	// Queries a list of Assets items.
	rpc AssetsAll(QueryAllAssetsRequest) returns (QueryAllAssetsResponse) {
		option (google.api.http).get = "/nasa70/car-auction/carauction/assets";
	}

// Queries a AuctionInfo by index.
	rpc AuctionInfo(QueryGetAuctionInfoRequest) returns (QueryGetAuctionInfoResponse) {
		option (google.api.http).get = "/nasa70/car-auction/carauction/auction_info";
	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetLotsRequest {
	uint64 id = 1;
}

message QueryGetLotsResponse {
	Lots Lots = 1 [(gogoproto.nullable) = false];
}

message QueryAllLotsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLotsResponse {
	repeated Lots Lots = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAssetsRequest {
	uint64 id = 1;
}

message QueryGetAssetsResponse {
	Assets Assets = 1 [(gogoproto.nullable) = false];
}

message QueryAllAssetsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAssetsResponse {
	repeated Assets Assets = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAuctionInfoRequest {}

message QueryGetAuctionInfoResponse {
	AuctionInfo AuctionInfo = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
