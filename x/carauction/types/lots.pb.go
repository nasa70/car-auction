// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carauction/lots.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lots struct {
	LotId      uint64     `protobuf:"varint,1,opt,name=lotId,proto3" json:"lotId,omitempty"`
	Owner      string     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	StartTime  uint64     `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	FinishTime uint64     `protobuf:"varint,4,opt,name=finishTime,proto3" json:"finishTime,omitempty"`
	Opened     bool       `protobuf:"varint,5,opt,name=opened,proto3" json:"opened,omitempty"`
	Approved   bool       `protobuf:"varint,6,opt,name=approved,proto3" json:"approved,omitempty"`
	Bid        types.Coin `protobuf:"bytes,7,opt,name=bid,proto3" json:"bid"`
	BidOwner   string     `protobuf:"bytes,8,opt,name=bidOwner,proto3" json:"bidOwner,omitempty"`
	Assets     []uint64   `protobuf:"varint,9,rep,packed,name=assets,proto3" json:"assets,omitempty"`
}

func (m *Lots) Reset()         { *m = Lots{} }
func (m *Lots) String() string { return proto.CompactTextString(m) }
func (*Lots) ProtoMessage()    {}
func (*Lots) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6cf910a37c54cb1, []int{0}
}
func (m *Lots) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lots) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lots.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lots) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lots.Merge(m, src)
}
func (m *Lots) XXX_Size() int {
	return m.Size()
}
func (m *Lots) XXX_DiscardUnknown() {
	xxx_messageInfo_Lots.DiscardUnknown(m)
}

var xxx_messageInfo_Lots proto.InternalMessageInfo

func (m *Lots) GetLotId() uint64 {
	if m != nil {
		return m.LotId
	}
	return 0
}

func (m *Lots) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Lots) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Lots) GetFinishTime() uint64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *Lots) GetOpened() bool {
	if m != nil {
		return m.Opened
	}
	return false
}

func (m *Lots) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

func (m *Lots) GetBid() types.Coin {
	if m != nil {
		return m.Bid
	}
	return types.Coin{}
}

func (m *Lots) GetBidOwner() string {
	if m != nil {
		return m.BidOwner
	}
	return ""
}

func (m *Lots) GetAssets() []uint64 {
	if m != nil {
		return m.Assets
	}
	return nil
}

func init() {
	proto.RegisterType((*Lots)(nil), "nasa70.carauction.carauction.Lots")
}

func init() { proto.RegisterFile("carauction/lots.proto", fileDescriptor_a6cf910a37c54cb1) }

var fileDescriptor_a6cf910a37c54cb1 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0x36, 0xed, 0xdf, 0xfa, 0xdf, 0xac, 0x82, 0x4c, 0x55, 0x99, 0x88, 0x29, 0x0b,
	0x76, 0x0b, 0x03, 0x7b, 0x99, 0x40, 0x48, 0x48, 0x11, 0x13, 0x9b, 0x93, 0x98, 0xd6, 0x52, 0xeb,
	0x1b, 0xc5, 0x6e, 0x81, 0x67, 0x60, 0xe1, 0xb1, 0x3a, 0x76, 0x64, 0x42, 0xa8, 0x7d, 0x11, 0x14,
	0xa7, 0xb4, 0xdd, 0xee, 0x77, 0xcf, 0x4d, 0x74, 0x8e, 0x0f, 0x3e, 0xc9, 0x64, 0x29, 0x17, 0x99,
	0xd3, 0x60, 0xc4, 0x0c, 0x9c, 0xe5, 0x45, 0x09, 0x0e, 0xc8, 0xc0, 0x48, 0x2b, 0x6f, 0x86, 0xfc,
	0xa0, 0x1e, 0x8d, 0xfd, 0xde, 0x04, 0x26, 0xe0, 0x0f, 0x45, 0x35, 0xd5, 0xdf, 0xf4, 0x59, 0x06,
	0x76, 0x0e, 0x56, 0xa4, 0xd2, 0x2a, 0xb1, 0x1c, 0xa5, 0xca, 0xc9, 0x91, 0xc8, 0x40, 0x9b, 0x5a,
	0xbf, 0xf8, 0x68, 0xe0, 0xf0, 0x01, 0x9c, 0x25, 0x3d, 0xdc, 0x9a, 0x81, 0xbb, 0xcb, 0x29, 0x8a,
	0x50, 0x1c, 0x26, 0x35, 0x54, 0x5b, 0x78, 0x35, 0xaa, 0xa4, 0x8d, 0x08, 0xc5, 0xdd, 0xa4, 0x06,
	0x32, 0xc0, 0x5d, 0xeb, 0x64, 0xe9, 0x9e, 0xf4, 0x5c, 0xd1, 0xa6, 0xbf, 0x3f, 0x2c, 0x08, 0xc3,
	0xf8, 0x45, 0x1b, 0x6d, 0xa7, 0x5e, 0x0e, 0xbd, 0x7c, 0xb4, 0x21, 0xa7, 0xb8, 0x0d, 0x85, 0x32,
	0x2a, 0xa7, 0xad, 0x08, 0xc5, 0x9d, 0x64, 0x47, 0xa4, 0x8f, 0x3b, 0xb2, 0x28, 0x4a, 0x58, 0xaa,
	0x9c, 0xb6, 0xbd, 0xb2, 0x67, 0x32, 0xc2, 0xcd, 0x54, 0xe7, 0xf4, 0x5f, 0x84, 0xe2, 0xff, 0x57,
	0x67, 0xbc, 0x0e, 0xc5, 0xab, 0x50, 0x7c, 0x17, 0x8a, 0xdf, 0x82, 0x36, 0xe3, 0x70, 0xf5, 0x7d,
	0x1e, 0x24, 0xd5, 0x6d, 0xf5, 0xbb, 0x54, 0xe7, 0x8f, 0xde, 0x7d, 0xc7, 0xbb, 0xdf, 0x73, 0x65,
	0x41, 0x5a, 0xab, 0x9c, 0xa5, 0xdd, 0xa8, 0x19, 0x87, 0xc9, 0x8e, 0xc6, 0xf7, 0xab, 0x0d, 0x43,
	0xeb, 0x0d, 0x43, 0x3f, 0x1b, 0x86, 0x3e, 0xb7, 0x2c, 0x58, 0x6f, 0x59, 0xf0, 0xb5, 0x65, 0xc1,
	0xf3, 0x70, 0xa2, 0xdd, 0x74, 0x91, 0xf2, 0x0c, 0xe6, 0xa2, 0xae, 0x41, 0x64, 0xb2, 0xbc, 0xfc,
	0x6b, 0xe9, 0x4d, 0x1c, 0x55, 0xe6, 0xde, 0x0b, 0x65, 0xd3, 0xb6, 0x7f, 0xe0, 0xeb, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0x3c, 0x24, 0x8e, 0xcd, 0x01, 0x00, 0x00,
}

func (m *Lots) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lots) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lots) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		dAtA2 := make([]byte, len(m.Assets)*10)
		var j1 int
		for _, num := range m.Assets {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLots(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BidOwner) > 0 {
		i -= len(m.BidOwner)
		copy(dAtA[i:], m.BidOwner)
		i = encodeVarintLots(dAtA, i, uint64(len(m.BidOwner)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLots(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Approved {
		i--
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Opened {
		i--
		if m.Opened {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FinishTime != 0 {
		i = encodeVarintLots(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintLots(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLots(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.LotId != 0 {
		i = encodeVarintLots(dAtA, i, uint64(m.LotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLots(dAtA []byte, offset int, v uint64) int {
	offset -= sovLots(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lots) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LotId != 0 {
		n += 1 + sovLots(uint64(m.LotId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLots(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovLots(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovLots(uint64(m.FinishTime))
	}
	if m.Opened {
		n += 2
	}
	if m.Approved {
		n += 2
	}
	l = m.Bid.Size()
	n += 1 + l + sovLots(uint64(l))
	l = len(m.BidOwner)
	if l > 0 {
		n += 1 + l + sovLots(uint64(l))
	}
	if len(m.Assets) > 0 {
		l = 0
		for _, e := range m.Assets {
			l += sovLots(uint64(e))
		}
		n += 1 + sovLots(uint64(l)) + l
	}
	return n
}

func sovLots(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLots(x uint64) (n int) {
	return sovLots(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lots) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLots
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lots: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lots: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotId", wireType)
			}
			m.LotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLots
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLots
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLots
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLots
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLots
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLots
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opened", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLots
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Opened = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLots
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLots
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLots
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLots
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLots
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLots
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLots
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLots
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Assets = append(m.Assets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLots
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLots
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLots
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Assets) == 0 {
					m.Assets = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLots
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Assets = append(m.Assets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLots(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLots
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLots(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLots
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLots
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLots
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLots
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLots
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLots
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLots        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLots          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLots = fmt.Errorf("proto: unexpected end of group")
)
