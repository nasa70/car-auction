// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carauction/lots_queue.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LotsQueue struct {
	LotId      uint64 `protobuf:"varint,1,opt,name=lotId,proto3" json:"lotId,omitempty"`
	PrevLotId  uint64 `protobuf:"varint,2,opt,name=prevLotId,proto3" json:"prevLotId,omitempty"`
	NextLotId  uint64 `protobuf:"varint,3,opt,name=nextLotId,proto3" json:"nextLotId,omitempty"`
	FinishTime uint64 `protobuf:"varint,4,opt,name=finishTime,proto3" json:"finishTime,omitempty"`
}

func (m *LotsQueue) Reset()         { *m = LotsQueue{} }
func (m *LotsQueue) String() string { return proto.CompactTextString(m) }
func (*LotsQueue) ProtoMessage()    {}
func (*LotsQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_68ff68c794c10ec7, []int{0}
}
func (m *LotsQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotsQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotsQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotsQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotsQueue.Merge(m, src)
}
func (m *LotsQueue) XXX_Size() int {
	return m.Size()
}
func (m *LotsQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_LotsQueue.DiscardUnknown(m)
}

var xxx_messageInfo_LotsQueue proto.InternalMessageInfo

func (m *LotsQueue) GetLotId() uint64 {
	if m != nil {
		return m.LotId
	}
	return 0
}

func (m *LotsQueue) GetPrevLotId() uint64 {
	if m != nil {
		return m.PrevLotId
	}
	return 0
}

func (m *LotsQueue) GetNextLotId() uint64 {
	if m != nil {
		return m.NextLotId
	}
	return 0
}

func (m *LotsQueue) GetFinishTime() uint64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func init() {
	proto.RegisterType((*LotsQueue)(nil), "nasa70.carauction.carauction.LotsQueue")
}

func init() { proto.RegisterFile("carauction/lots_queue.proto", fileDescriptor_68ff68c794c10ec7) }

var fileDescriptor_68ff68c794c10ec7 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x4e, 0x2c, 0x4a,
	0x2c, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0xcf, 0xc9, 0x2f, 0x29, 0x8e, 0x2f, 0x2c, 0x4d, 0x2d,
	0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xc9, 0x4b, 0x2c, 0x4e, 0x34, 0x37, 0xd0,
	0x43, 0xa8, 0x41, 0x62, 0x2a, 0xd5, 0x72, 0x71, 0xfa, 0xe4, 0x97, 0x14, 0x07, 0x82, 0x34, 0x08,
	0x89, 0x70, 0xb1, 0xe6, 0xe4, 0x97, 0x78, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x41,
	0x38, 0x42, 0x32, 0x5c, 0x9c, 0x05, 0x45, 0xa9, 0x65, 0x3e, 0x60, 0x19, 0x26, 0xb0, 0x0c, 0x42,
	0x00, 0x24, 0x9b, 0x97, 0x5a, 0x51, 0x02, 0x91, 0x65, 0x86, 0xc8, 0xc2, 0x05, 0x84, 0xe4, 0xb8,
	0xb8, 0xd2, 0x32, 0xf3, 0x32, 0x8b, 0x33, 0x42, 0x32, 0x73, 0x53, 0x25, 0x58, 0xc0, 0xd2, 0x48,
	0x22, 0x4e, 0x5e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3,
	0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x90, 0x9e,
	0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0xf1, 0x81, 0x7e, 0x72, 0x62, 0x91,
	0x2e, 0xcc, 0x9b, 0x15, 0xfa, 0x48, 0x7e, 0x2e, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0xfb,
	0xd7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x17, 0x2a, 0xcc, 0x0e, 0x01, 0x00, 0x00,
}

func (m *LotsQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotsQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotsQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinishTime != 0 {
		i = encodeVarintLotsQueue(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x20
	}
	if m.NextLotId != 0 {
		i = encodeVarintLotsQueue(dAtA, i, uint64(m.NextLotId))
		i--
		dAtA[i] = 0x18
	}
	if m.PrevLotId != 0 {
		i = encodeVarintLotsQueue(dAtA, i, uint64(m.PrevLotId))
		i--
		dAtA[i] = 0x10
	}
	if m.LotId != 0 {
		i = encodeVarintLotsQueue(dAtA, i, uint64(m.LotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLotsQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovLotsQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LotsQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LotId != 0 {
		n += 1 + sovLotsQueue(uint64(m.LotId))
	}
	if m.PrevLotId != 0 {
		n += 1 + sovLotsQueue(uint64(m.PrevLotId))
	}
	if m.NextLotId != 0 {
		n += 1 + sovLotsQueue(uint64(m.NextLotId))
	}
	if m.FinishTime != 0 {
		n += 1 + sovLotsQueue(uint64(m.FinishTime))
	}
	return n
}

func sovLotsQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLotsQueue(x uint64) (n int) {
	return sovLotsQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LotsQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLotsQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotsQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotsQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotId", wireType)
			}
			m.LotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLotsQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevLotId", wireType)
			}
			m.PrevLotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLotsQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevLotId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextLotId", wireType)
			}
			m.NextLotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLotsQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextLotId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLotsQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLotsQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLotsQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLotsQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLotsQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLotsQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLotsQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLotsQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLotsQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLotsQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLotsQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLotsQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLotsQueue = fmt.Errorf("proto: unexpected end of group")
)
